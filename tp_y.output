Rules useless in parser due to conflicts

    5 declL: declL decl


State 4 conflicts: 1 shift/reduce
State 8 conflicts: 1 shift/reduce
State 9 conflicts: 1 shift/reduce, 2 reduce/reduce
State 10 conflicts: 1 shift/reduce
State 34 conflicts: 2 shift/reduce


Grammar

    0 $accept: programme $end

    1 programme: declL BEG expr END

    2 declL: decl
    3      | decl declL
    4      | declL declL
    5      | declL decl

    6 decl: ID ';'

    7 expr: IF bexpr THEN expr ELSE expr
    8     | expr ADD expr
    9     | expr SUB expr
   10     | CST
   11     | ID
   12     | '(' expr ')'

   13 bexpr: expr RELOP expr
   14      | '(' bexpr ')'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 12 14
')' (41) 12 14
';' (59) 6
error (256)
IF (258) 7
THEN (259) 7
ELSE (260) 7
BEG (261) 1
END (262) 1
ADD (263) 8
SUB (264) 9
ID (265) 6 11
CST (266) 10
RELOP (267) 13


Nonterminals, with rules where they appear

$accept (16)
    on left: 0
programme (17)
    on left: 1, on right: 0
declL (18)
    on left: 2 3 4 5, on right: 1 3 4 5
decl (19)
    on left: 6, on right: 2 3 5
expr (20)
    on left: 7 8 9 10 11 12, on right: 1 7 8 9 12 13
bexpr (21)
    on left: 13 14, on right: 7 14


State 0

    0 $accept: . programme $end

    ID  shift, and go to state 1

    programme  go to state 2
    declL      go to state 3
    decl       go to state 4


State 1

    6 decl: ID . ';'

    ';'  shift, and go to state 5


State 2

    0 $accept: programme . $end

    $end  shift, and go to state 6


State 3

    1 programme: declL . BEG expr END
    4 declL: declL . declL
    5      | declL . decl

    BEG  shift, and go to state 7
    ID   shift, and go to state 1

    declL  go to state 8
    decl   go to state 9


State 4

    2 declL: decl .
    3      | decl . declL

    ID  shift, and go to state 1

    ID        [reduce using rule 2 (declL)]
    $default  reduce using rule 2 (declL)

    declL  go to state 10
    decl   go to state 4


State 5

    6 decl: ID ';' .

    $default  reduce using rule 6 (decl)


State 6

    0 $accept: programme $end .

    $default  accept


State 7

    1 programme: declL BEG . expr END

    IF   shift, and go to state 11
    ID   shift, and go to state 12
    CST  shift, and go to state 13
    '('  shift, and go to state 14

    expr  go to state 15


State 8

    4 declL: declL . declL
    4      | declL declL .
    5      | declL . decl

    ID  shift, and go to state 1

    ID        [reduce using rule 4 (declL)]
    $default  reduce using rule 4 (declL)

    declL  go to state 8
    decl   go to state 9


State 9

    2 declL: decl .
    3      | decl . declL
    5      | declL decl .

    ID  shift, and go to state 1

    BEG       reduce using rule 2 (declL)
    BEG       [reduce using rule 5 (declL)]
    ID        [reduce using rule 2 (declL)]
    ID        [reduce using rule 5 (declL)]
    $default  reduce using rule 2 (declL)

    declL  go to state 10
    decl   go to state 4


State 10

    3 declL: decl declL .
    4      | declL . declL
    5      | declL . decl

    ID  shift, and go to state 1

    ID        [reduce using rule 3 (declL)]
    $default  reduce using rule 3 (declL)

    declL  go to state 8
    decl   go to state 9


State 11

    7 expr: IF . bexpr THEN expr ELSE expr

    IF   shift, and go to state 11
    ID   shift, and go to state 12
    CST  shift, and go to state 13
    '('  shift, and go to state 16

    expr   go to state 17
    bexpr  go to state 18


State 12

   11 expr: ID .

    $default  reduce using rule 11 (expr)


State 13

   10 expr: CST .

    $default  reduce using rule 10 (expr)


State 14

   12 expr: '(' . expr ')'

    IF   shift, and go to state 11
    ID   shift, and go to state 12
    CST  shift, and go to state 13
    '('  shift, and go to state 14

    expr  go to state 19


State 15

    1 programme: declL BEG expr . END
    8 expr: expr . ADD expr
    9     | expr . SUB expr

    END  shift, and go to state 20
    ADD  shift, and go to state 21
    SUB  shift, and go to state 22


State 16

   12 expr: '(' . expr ')'
   14 bexpr: '(' . bexpr ')'

    IF   shift, and go to state 11
    ID   shift, and go to state 12
    CST  shift, and go to state 13
    '('  shift, and go to state 16

    expr   go to state 23
    bexpr  go to state 24


State 17

    8 expr: expr . ADD expr
    9     | expr . SUB expr
   13 bexpr: expr . RELOP expr

    ADD    shift, and go to state 21
    SUB    shift, and go to state 22
    RELOP  shift, and go to state 25


State 18

    7 expr: IF bexpr . THEN expr ELSE expr

    THEN  shift, and go to state 26


State 19

    8 expr: expr . ADD expr
    9     | expr . SUB expr
   12     | '(' expr . ')'

    ADD  shift, and go to state 21
    SUB  shift, and go to state 22
    ')'  shift, and go to state 27


State 20

    1 programme: declL BEG expr END .

    $default  reduce using rule 1 (programme)


State 21

    8 expr: expr ADD . expr

    IF   shift, and go to state 11
    ID   shift, and go to state 12
    CST  shift, and go to state 13
    '('  shift, and go to state 14

    expr  go to state 28


State 22

    9 expr: expr SUB . expr

    IF   shift, and go to state 11
    ID   shift, and go to state 12
    CST  shift, and go to state 13
    '('  shift, and go to state 14

    expr  go to state 29


State 23

    8 expr: expr . ADD expr
    9     | expr . SUB expr
   12     | '(' expr . ')'
   13 bexpr: expr . RELOP expr

    ADD    shift, and go to state 21
    SUB    shift, and go to state 22
    RELOP  shift, and go to state 25
    ')'    shift, and go to state 27


State 24

   14 bexpr: '(' bexpr . ')'

    ')'  shift, and go to state 30


State 25

   13 bexpr: expr RELOP . expr

    IF   shift, and go to state 11
    ID   shift, and go to state 12
    CST  shift, and go to state 13
    '('  shift, and go to state 14

    expr  go to state 31


State 26

    7 expr: IF bexpr THEN . expr ELSE expr

    IF   shift, and go to state 11
    ID   shift, and go to state 12
    CST  shift, and go to state 13
    '('  shift, and go to state 14

    expr  go to state 32


State 27

   12 expr: '(' expr ')' .

    $default  reduce using rule 12 (expr)


State 28

    8 expr: expr . ADD expr
    8     | expr ADD expr .
    9     | expr . SUB expr

    $default  reduce using rule 8 (expr)


State 29

    8 expr: expr . ADD expr
    9     | expr . SUB expr
    9     | expr SUB expr .

    $default  reduce using rule 9 (expr)


State 30

   14 bexpr: '(' bexpr ')' .

    $default  reduce using rule 14 (bexpr)


State 31

    8 expr: expr . ADD expr
    9     | expr . SUB expr
   13 bexpr: expr RELOP expr .

    ADD  shift, and go to state 21
    SUB  shift, and go to state 22

    $default  reduce using rule 13 (bexpr)


State 32

    7 expr: IF bexpr THEN expr . ELSE expr
    8     | expr . ADD expr
    9     | expr . SUB expr

    ELSE  shift, and go to state 33
    ADD   shift, and go to state 21
    SUB   shift, and go to state 22


State 33

    7 expr: IF bexpr THEN expr ELSE . expr

    IF   shift, and go to state 11
    ID   shift, and go to state 12
    CST  shift, and go to state 13
    '('  shift, and go to state 14

    expr  go to state 34


State 34

    7 expr: IF bexpr THEN expr ELSE expr .
    8     | expr . ADD expr
    9     | expr . SUB expr

    ADD  shift, and go to state 21
    SUB  shift, and go to state 22

    ADD       [reduce using rule 7 (expr)]
    SUB       [reduce using rule 7 (expr)]
    $default  reduce using rule 7 (expr)

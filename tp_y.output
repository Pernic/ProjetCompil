Terminals unused in grammar

   DECL_LIST
   RELOP


Rules useless in parser due to conflicts

    5 declL: declL decl


State 4 conflicts: 1 shift/reduce
State 9 conflicts: 1 shift/reduce
State 10 conflicts: 1 shift/reduce, 2 reduce/reduce
State 11 conflicts: 1 shift/reduce
State 38 conflicts: 2 shift/reduce
State 39 conflicts: 2 shift/reduce
State 40 conflicts: 4 shift/reduce
State 41 conflicts: 4 shift/reduce
State 49 conflicts: 5 shift/reduce
State 51 conflicts: 4 shift/reduce


Grammar

    0 $accept: programme $end

    1 programme: declL BEG expr END

    2 declL: decl
    3      | decl declL
    4      | declL declL
    5      | declL decl

    6 decl: ID ';'
    7     | ID AFFECT expr ';'

    8 expr: IF bexpr THEN expr ELSE expr
    9     | IF bexpr THEN expr
   10     | expr ADD expr
   11     | expr SUB expr
   12     | expr MUL expr
   13     | expr AFFECT expr
   14     | CST
   15     | ID
   16     | '(' expr ')'

   17 bexpr: expr EQ expr
   18      | expr NE expr
   19      | expr LE expr
   20      | expr GE expr
   21      | expr GT expr
   22      | expr LT expr
   23      | '(' bexpr ')'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 16 23
')' (41) 16 23
';' (59) 6 7
error (256)
IF (258) 8 9
THEN (259) 8 9
ELSE (260) 8
BEG (261) 1
END (262) 1
ADD (263) 10
SUB (264) 11
DECL_LIST (265)
AFFECT (266) 7 13
MUL (267) 12
ID (268) 6 7 15
CST (269) 14
RELOP (270)
EQ (271) 17
NE (272) 18
LE (273) 19
GE (274) 20
GT (275) 21
LT (276) 22


Nonterminals, with rules where they appear

$accept (25)
    on left: 0
programme (26)
    on left: 1, on right: 0
declL (27)
    on left: 2 3 4 5, on right: 1 3 4 5
decl (28)
    on left: 6 7, on right: 2 3 5
expr (29)
    on left: 8 9 10 11 12 13 14 15 16, on right: 1 7 8 9 10 11 12 13
    16 17 18 19 20 21 22
bexpr (30)
    on left: 17 18 19 20 21 22 23, on right: 8 9 23


State 0

    0 $accept: . programme $end

    ID  shift, and go to state 1

    programme  go to state 2
    declL      go to state 3
    decl       go to state 4


State 1

    6 decl: ID . ';'
    7     | ID . AFFECT expr ';'

    AFFECT  shift, and go to state 5
    ';'     shift, and go to state 6


State 2

    0 $accept: programme . $end

    $end  shift, and go to state 7


State 3

    1 programme: declL . BEG expr END
    4 declL: declL . declL
    5      | declL . decl

    BEG  shift, and go to state 8
    ID   shift, and go to state 1

    declL  go to state 9
    decl   go to state 10


State 4

    2 declL: decl .
    3      | decl . declL

    ID  shift, and go to state 1

    ID        [reduce using rule 2 (declL)]
    $default  reduce using rule 2 (declL)

    declL  go to state 11
    decl   go to state 4


State 5

    7 decl: ID AFFECT . expr ';'

    IF   shift, and go to state 12
    ID   shift, and go to state 13
    CST  shift, and go to state 14
    '('  shift, and go to state 15

    expr  go to state 16


State 6

    6 decl: ID ';' .

    $default  reduce using rule 6 (decl)


State 7

    0 $accept: programme $end .

    $default  accept


State 8

    1 programme: declL BEG . expr END

    IF   shift, and go to state 12
    ID   shift, and go to state 13
    CST  shift, and go to state 14
    '('  shift, and go to state 15

    expr  go to state 17


State 9

    4 declL: declL . declL
    4      | declL declL .
    5      | declL . decl

    ID  shift, and go to state 1

    ID        [reduce using rule 4 (declL)]
    $default  reduce using rule 4 (declL)

    declL  go to state 9
    decl   go to state 10


State 10

    2 declL: decl .
    3      | decl . declL
    5      | declL decl .

    ID  shift, and go to state 1

    BEG       reduce using rule 2 (declL)
    BEG       [reduce using rule 5 (declL)]
    ID        [reduce using rule 2 (declL)]
    ID        [reduce using rule 5 (declL)]
    $default  reduce using rule 2 (declL)

    declL  go to state 11
    decl   go to state 4


State 11

    3 declL: decl declL .
    4      | declL . declL
    5      | declL . decl

    ID  shift, and go to state 1

    ID        [reduce using rule 3 (declL)]
    $default  reduce using rule 3 (declL)

    declL  go to state 9
    decl   go to state 10


State 12

    8 expr: IF . bexpr THEN expr ELSE expr
    9     | IF . bexpr THEN expr

    IF   shift, and go to state 12
    ID   shift, and go to state 13
    CST  shift, and go to state 14
    '('  shift, and go to state 18

    expr   go to state 19
    bexpr  go to state 20


State 13

   15 expr: ID .

    $default  reduce using rule 15 (expr)


State 14

   14 expr: CST .

    $default  reduce using rule 14 (expr)


State 15

   16 expr: '(' . expr ')'

    IF   shift, and go to state 12
    ID   shift, and go to state 13
    CST  shift, and go to state 14
    '('  shift, and go to state 15

    expr  go to state 21


State 16

    7 decl: ID AFFECT expr . ';'
   10 expr: expr . ADD expr
   11     | expr . SUB expr
   12     | expr . MUL expr
   13     | expr . AFFECT expr

    ADD     shift, and go to state 22
    SUB     shift, and go to state 23
    AFFECT  shift, and go to state 24
    MUL     shift, and go to state 25
    ';'     shift, and go to state 26


State 17

    1 programme: declL BEG expr . END
   10 expr: expr . ADD expr
   11     | expr . SUB expr
   12     | expr . MUL expr
   13     | expr . AFFECT expr

    END     shift, and go to state 27
    ADD     shift, and go to state 22
    SUB     shift, and go to state 23
    AFFECT  shift, and go to state 24
    MUL     shift, and go to state 25


State 18

   16 expr: '(' . expr ')'
   23 bexpr: '(' . bexpr ')'

    IF   shift, and go to state 12
    ID   shift, and go to state 13
    CST  shift, and go to state 14
    '('  shift, and go to state 18

    expr   go to state 28
    bexpr  go to state 29


State 19

   10 expr: expr . ADD expr
   11     | expr . SUB expr
   12     | expr . MUL expr
   13     | expr . AFFECT expr
   17 bexpr: expr . EQ expr
   18      | expr . NE expr
   19      | expr . LE expr
   20      | expr . GE expr
   21      | expr . GT expr
   22      | expr . LT expr

    ADD     shift, and go to state 22
    SUB     shift, and go to state 23
    AFFECT  shift, and go to state 24
    MUL     shift, and go to state 25
    EQ      shift, and go to state 30
    NE      shift, and go to state 31
    LE      shift, and go to state 32
    GE      shift, and go to state 33
    GT      shift, and go to state 34
    LT      shift, and go to state 35


State 20

    8 expr: IF bexpr . THEN expr ELSE expr
    9     | IF bexpr . THEN expr

    THEN  shift, and go to state 36


State 21

   10 expr: expr . ADD expr
   11     | expr . SUB expr
   12     | expr . MUL expr
   13     | expr . AFFECT expr
   16     | '(' expr . ')'

    ADD     shift, and go to state 22
    SUB     shift, and go to state 23
    AFFECT  shift, and go to state 24
    MUL     shift, and go to state 25
    ')'     shift, and go to state 37


State 22

   10 expr: expr ADD . expr

    IF   shift, and go to state 12
    ID   shift, and go to state 13
    CST  shift, and go to state 14
    '('  shift, and go to state 15

    expr  go to state 38


State 23

   11 expr: expr SUB . expr

    IF   shift, and go to state 12
    ID   shift, and go to state 13
    CST  shift, and go to state 14
    '('  shift, and go to state 15

    expr  go to state 39


State 24

   13 expr: expr AFFECT . expr

    IF   shift, and go to state 12
    ID   shift, and go to state 13
    CST  shift, and go to state 14
    '('  shift, and go to state 15

    expr  go to state 40


State 25

   12 expr: expr MUL . expr

    IF   shift, and go to state 12
    ID   shift, and go to state 13
    CST  shift, and go to state 14
    '('  shift, and go to state 15

    expr  go to state 41


State 26

    7 decl: ID AFFECT expr ';' .

    $default  reduce using rule 7 (decl)


State 27

    1 programme: declL BEG expr END .

    $default  reduce using rule 1 (programme)


State 28

   10 expr: expr . ADD expr
   11     | expr . SUB expr
   12     | expr . MUL expr
   13     | expr . AFFECT expr
   16     | '(' expr . ')'
   17 bexpr: expr . EQ expr
   18      | expr . NE expr
   19      | expr . LE expr
   20      | expr . GE expr
   21      | expr . GT expr
   22      | expr . LT expr

    ADD     shift, and go to state 22
    SUB     shift, and go to state 23
    AFFECT  shift, and go to state 24
    MUL     shift, and go to state 25
    EQ      shift, and go to state 30
    NE      shift, and go to state 31
    LE      shift, and go to state 32
    GE      shift, and go to state 33
    GT      shift, and go to state 34
    LT      shift, and go to state 35
    ')'     shift, and go to state 37


State 29

   23 bexpr: '(' bexpr . ')'

    ')'  shift, and go to state 42


State 30

   17 bexpr: expr EQ . expr

    IF   shift, and go to state 12
    ID   shift, and go to state 13
    CST  shift, and go to state 14
    '('  shift, and go to state 15

    expr  go to state 43


State 31

   18 bexpr: expr NE . expr

    IF   shift, and go to state 12
    ID   shift, and go to state 13
    CST  shift, and go to state 14
    '('  shift, and go to state 15

    expr  go to state 44


State 32

   19 bexpr: expr LE . expr

    IF   shift, and go to state 12
    ID   shift, and go to state 13
    CST  shift, and go to state 14
    '('  shift, and go to state 15

    expr  go to state 45


State 33

   20 bexpr: expr GE . expr

    IF   shift, and go to state 12
    ID   shift, and go to state 13
    CST  shift, and go to state 14
    '('  shift, and go to state 15

    expr  go to state 46


State 34

   21 bexpr: expr GT . expr

    IF   shift, and go to state 12
    ID   shift, and go to state 13
    CST  shift, and go to state 14
    '('  shift, and go to state 15

    expr  go to state 47


State 35

   22 bexpr: expr LT . expr

    IF   shift, and go to state 12
    ID   shift, and go to state 13
    CST  shift, and go to state 14
    '('  shift, and go to state 15

    expr  go to state 48


State 36

    8 expr: IF bexpr THEN . expr ELSE expr
    9     | IF bexpr THEN . expr

    IF   shift, and go to state 12
    ID   shift, and go to state 13
    CST  shift, and go to state 14
    '('  shift, and go to state 15

    expr  go to state 49


State 37

   16 expr: '(' expr ')' .

    $default  reduce using rule 16 (expr)


State 38

   10 expr: expr . ADD expr
   10     | expr ADD expr .
   11     | expr . SUB expr
   12     | expr . MUL expr
   13     | expr . AFFECT expr

    AFFECT  shift, and go to state 24
    MUL     shift, and go to state 25

    AFFECT    [reduce using rule 10 (expr)]
    MUL       [reduce using rule 10 (expr)]
    $default  reduce using rule 10 (expr)


State 39

   10 expr: expr . ADD expr
   11     | expr . SUB expr
   11     | expr SUB expr .
   12     | expr . MUL expr
   13     | expr . AFFECT expr

    AFFECT  shift, and go to state 24
    MUL     shift, and go to state 25

    AFFECT    [reduce using rule 11 (expr)]
    MUL       [reduce using rule 11 (expr)]
    $default  reduce using rule 11 (expr)


State 40

   10 expr: expr . ADD expr
   11     | expr . SUB expr
   12     | expr . MUL expr
   13     | expr . AFFECT expr
   13     | expr AFFECT expr .

    ADD     shift, and go to state 22
    SUB     shift, and go to state 23
    AFFECT  shift, and go to state 24
    MUL     shift, and go to state 25

    ADD       [reduce using rule 13 (expr)]
    SUB       [reduce using rule 13 (expr)]
    AFFECT    [reduce using rule 13 (expr)]
    MUL       [reduce using rule 13 (expr)]
    $default  reduce using rule 13 (expr)


State 41

   10 expr: expr . ADD expr
   11     | expr . SUB expr
   12     | expr . MUL expr
   12     | expr MUL expr .
   13     | expr . AFFECT expr

    ADD     shift, and go to state 22
    SUB     shift, and go to state 23
    AFFECT  shift, and go to state 24
    MUL     shift, and go to state 25

    ADD       [reduce using rule 12 (expr)]
    SUB       [reduce using rule 12 (expr)]
    AFFECT    [reduce using rule 12 (expr)]
    MUL       [reduce using rule 12 (expr)]
    $default  reduce using rule 12 (expr)


State 42

   23 bexpr: '(' bexpr ')' .

    $default  reduce using rule 23 (bexpr)


State 43

   10 expr: expr . ADD expr
   11     | expr . SUB expr
   12     | expr . MUL expr
   13     | expr . AFFECT expr
   17 bexpr: expr EQ expr .

    ADD     shift, and go to state 22
    SUB     shift, and go to state 23
    AFFECT  shift, and go to state 24
    MUL     shift, and go to state 25

    $default  reduce using rule 17 (bexpr)


State 44

   10 expr: expr . ADD expr
   11     | expr . SUB expr
   12     | expr . MUL expr
   13     | expr . AFFECT expr
   18 bexpr: expr NE expr .

    ADD     shift, and go to state 22
    SUB     shift, and go to state 23
    AFFECT  shift, and go to state 24
    MUL     shift, and go to state 25

    $default  reduce using rule 18 (bexpr)


State 45

   10 expr: expr . ADD expr
   11     | expr . SUB expr
   12     | expr . MUL expr
   13     | expr . AFFECT expr
   19 bexpr: expr LE expr .

    ADD     shift, and go to state 22
    SUB     shift, and go to state 23
    AFFECT  shift, and go to state 24
    MUL     shift, and go to state 25

    $default  reduce using rule 19 (bexpr)


State 46

   10 expr: expr . ADD expr
   11     | expr . SUB expr
   12     | expr . MUL expr
   13     | expr . AFFECT expr
   20 bexpr: expr GE expr .

    ADD     shift, and go to state 22
    SUB     shift, and go to state 23
    AFFECT  shift, and go to state 24
    MUL     shift, and go to state 25

    $default  reduce using rule 20 (bexpr)


State 47

   10 expr: expr . ADD expr
   11     | expr . SUB expr
   12     | expr . MUL expr
   13     | expr . AFFECT expr
   21 bexpr: expr GT expr .

    ADD     shift, and go to state 22
    SUB     shift, and go to state 23
    AFFECT  shift, and go to state 24
    MUL     shift, and go to state 25

    $default  reduce using rule 21 (bexpr)


State 48

   10 expr: expr . ADD expr
   11     | expr . SUB expr
   12     | expr . MUL expr
   13     | expr . AFFECT expr
   22 bexpr: expr LT expr .

    ADD     shift, and go to state 22
    SUB     shift, and go to state 23
    AFFECT  shift, and go to state 24
    MUL     shift, and go to state 25

    $default  reduce using rule 22 (bexpr)


State 49

    8 expr: IF bexpr THEN expr . ELSE expr
    9     | IF bexpr THEN expr .
   10     | expr . ADD expr
   11     | expr . SUB expr
   12     | expr . MUL expr
   13     | expr . AFFECT expr

    ELSE    shift, and go to state 50
    ADD     shift, and go to state 22
    SUB     shift, and go to state 23
    AFFECT  shift, and go to state 24
    MUL     shift, and go to state 25

    ELSE      [reduce using rule 9 (expr)]
    ADD       [reduce using rule 9 (expr)]
    SUB       [reduce using rule 9 (expr)]
    AFFECT    [reduce using rule 9 (expr)]
    MUL       [reduce using rule 9 (expr)]
    $default  reduce using rule 9 (expr)


State 50

    8 expr: IF bexpr THEN expr ELSE . expr

    IF   shift, and go to state 12
    ID   shift, and go to state 13
    CST  shift, and go to state 14
    '('  shift, and go to state 15

    expr  go to state 51


State 51

    8 expr: IF bexpr THEN expr ELSE expr .
   10     | expr . ADD expr
   11     | expr . SUB expr
   12     | expr . MUL expr
   13     | expr . AFFECT expr

    ADD     shift, and go to state 22
    SUB     shift, and go to state 23
    AFFECT  shift, and go to state 24
    MUL     shift, and go to state 25

    ADD       [reduce using rule 8 (expr)]
    SUB       [reduce using rule 8 (expr)]
    AFFECT    [reduce using rule 8 (expr)]
    MUL       [reduce using rule 8 (expr)]
    $default  reduce using rule 8 (expr)
